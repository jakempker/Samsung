}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(2)
x <- c(1:10)
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y <-  makeVector(x)
y
print(y)
cachemean(y)
mean(x)
numeric()
a <- numeric()
a
m <- NULL
m
get <- function() x
View(get)
get(1)
get(x)
get()
?is.null
?!is.null
x <- function(x=numeric()) mean
x
x(c(1,2,3))
x(3)
x <- function(x=numeric()) mean()
x(c(1,2,3)
x(c(1,2,3))
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- funtion(solve) i <<- solve
getInverse <- funtion() i
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
makeVector <- function(x = numeric()) { #x = numeric() specifies an empty numeric vector
m <- NULL                           # this creates an empty object
set <- function(y) {                # this creates a function called 'set' with single argument 'y'
x <<- y                         #x is now assigned the variable y but in the parent environment
m <<- NULL                      #m is assigned a NULL in the parent environment
}
get <- function() x                 # this produces the function 'get' that calls x
setmean <- function(mean) m <<- mean#the function 'setmean' calls 'mean' and produces m where m is created in paretn function environment
getmean <- function() m             # the function 'getmean' calls m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- funtion(solve) i <<- solve
getInverse <- funtion() i
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- funtion(solve) i <<- solve
getinverse <- funtion() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- solve
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
debug()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- funtion(solve) i <<- solve
getinverse <- funtion() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
debug(makeCacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- funtion(solve) i <<- solve
getinverse <- funtion() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setmean <- function(solve) i <<- solve
getmean <- function() i
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeVector <- function(x = numeric()) { #x = numeric() specifies an empty numeric vector
m <- NULL                           # this creates an empty object
set <- function(y) {                # this creates a function called 'set' with single argument 'y'
x <<- y                         #x is now assigned the variable y but in the parent environment
m <<- NULL                      #m is assigned a NULL in the parent environment
}
get <- function() x                 # this produces the function 'get' that calls x
setmean <- function(mean) m <<- mean#the function 'setmean' calls 'mean' and produces m where m is created in paretn function environment
getmean <- function() m             # the function 'getmean' calls m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x = c(1:10))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
x <- makeVector(x = c(1:10))
x
cachemean(x)
cachemean <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cachemean <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
rnorm(1:100, 2,3)
str(rnorm)
str(mean)
str(rpois)
str(ppois)
rbinom(100, 1, 0.5)
rbinom(100, 2, 0.5)
letters
Rupdate()
??Rtools
install.packages("Rtools")
source("http://bioconductor.org/biocLite..R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls('example.h5')
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
readA = h5read("example.h5", "foo/A")
readA
?foreign
??Foreign
??foreign
>read.xport
?read.xport
??foreign
install.packages('sqldf')
library(sqldf)
install.packages("proto")
install.packages("gsubn")
install.packages("gsubfn")
library(sqldf)
install.packages("httr")
library(httr)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
GET(url)
acs <- GET(url, method = "curl")
acs <- GET(url)
acs1 <- read.csv(acs)
acs <- read.csv(url)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
u1 <- unique(acs$AGEP)
u2 <- sqldf("select unique AGEP from acs")
u2 <- sqldf("select distinct AGEP from acs")
u1 == u2
url <- "http://biostat.jhsph.edu/~jleek/contact.html "
x <- GET(url)
content(x, as = "tex")
htmlPars(x, asTEXT = TRUE)
htmlParse(x, asTEXT = TRUE)
library(httr)
?htmlParse
??htmlParse
install.packages("XML")
z <- htmlParse(x, asTEXT=TRUE)
?XML
library(XML)
z <- htmlParse(x, asTEXT=TRUE)
z <- htmlParse(x)
a
z
z[[1]]
z[1]
z<- htmlRoot(x)
z<- xmlRoot(x)
x <- readLines(url)
close(url)
x
z <- htmlTreeParse(url, useInternalNodes = T)
url = url(http://biostat.jhsph.edu/~jleek/contact.html)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url, useInternalNodes = T)
html
html[[1]]
html[1]
xpathSApply(html, nchar)
url1 = GET(url)
content2 = content(url1, asText=T)
content2 = content(url1, as = "text")
parsed = htmlParse(content2, asText = T)
parsed
xpathSApply(parsed)
xpathSApply(parsed, xmValue)
xpathSApply(parsed, "//body", xmValue)
nchar(x[10])
nchar(x[20])
nchar(x[20])
nchar(x[30])
nchar(x[100])
?read.fwf
url <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"")
url <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a <- read.fwf(url, )
a <- read.fwf(url, header=T, widths= c(12))
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(url, header=T, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
url <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
a <- read.fwf(url, header=T, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(url, skip = 2, header=T, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
a <- read.fwf(url, skip = 2, header=T, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(url, skip = 3, header=T, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(url, skip = 4, header=T, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(file = url(url), skip = 4, header=T, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(file = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip = 4,
widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(file = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip = 3,
header = T,
widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(file = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip = 4,
header = T,
widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(file = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip = 4,
widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
a <- read.fwf(file = "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
skip = 4,
widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(a[,4],a[,9])
sum(a[,4])
sum(a[,4]) + sum(a[,9])
sum(a[,9])
sum(a[4,1:9])
sum(a[4,])
sum(a[4,2:9])
View(a)
sum(a[,4])
a <- read.fwf(file = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
skip = 4,
widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(a[,4])
myapp <- oauth_app(“github”,
key=”52b0c001d96337ec76fa”,
secret = “6697531c66c19ad43cdfc3a28f9c4bbdf01b891a”)
library(httpuv)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app(“github”,
key=”52b0c001d96337ec76fa”,
secret = “6697531c66c19ad43cdfc3a28f9c4bbdf01b891a”)
myapp <- oauth_app(“github”,
key = ”52b0c001d96337ec76fa”,
secret = “6697531c66c19ad43cdfc3a28f9c4bbdf01b891a”)
setwd("C:/Users/jkempke/Box Sync/Coursera/Samsung")
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
train <- read.table(file = "./UCI HAR Dataset/train/X_train.txt", sep = "", header = F)
test <- read.table(file = "./UCI HAR Dataset/test/X_test.txt", sep = "", header = F)
run_analysis <- rbind(test, train)
head(run_analysis)
mean <- sapply(run_analysis, mean)
std <- sapply(run_analysis, std)
?std
std <- sapply(run_analysis, sd)
labels <- read.table(file= "./UCI HAR Dataset/features.txt", sep = "")
head(labels)
names(run_analysis) <- labels
labels <- labels$V1
labels <- read.table(file= "./UCI HAR Dataset/features.txt", sep = "")
labels <- labels$V2
run_analysis <- rbind(test, train)
names(run_analysis) <- labels
head(run_analysis)
tail(run_analysis)
library(ddplyr)
install.packages("ddplyr")
library(ddplyr)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
run_analysis2 <- tbl_df(run_analysis)
run_analysis2
head(run_analysis2)
run_analysis3 <- select(run_analysis2, contains(mean, std), ignore.case = TRUE)
run_analysis3 <- select(run_analysis2, contains("mean"), ignore.case = TRUE)
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE)
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE))
dim(labels)
?read.table
labels <- read.table(file= "./UCI HAR Dataset/features.txt", sep = "", stringsAsFactors = F)
labels <- labels$V2
run_analysis <- rbind(test, train)
names(run_analysis) <- labels
run_analysis2 <- tbl_df(run_analysis)
run_analysis2
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE))
train_subject <- read.table(file= "./UCI HAR Dataset/train/subject_train.txt")
test_subject <- read.table(file="./UCI HAR Dataset/test/subject_test.txt")
View(train_subject)
train_activity <- read.table(file= "./UCI HAR Dataset/train/y_train.txt")
test_activity <- read.table(file="./UCI HAR Dataset/test/y_test.txt")
train_data <- read.table(file = "./UCI HAR Dataset/train/X_train.txt", sep = "", header = F)
train <- cbind(train_subject, train_activity, train_data)
test_data <- read.table(file = "./UCI HAR Dataset/test/X_test.txt", sep = "", header = F)
test <- cbind(test_subject, test_activity, test_data)
run_analysis <- rbind(test, train)
names(run_analysis) <- labels
?read.table
train_subject <- read.table(file= "./UCI HAR Dataset/train/subject_train.txt", col.names = "subject_id")
train_activity <- read.table(file= "./UCI HAR Dataset/train/y_train.txt", col.names = "activity_id")
names(train_data) <- labels
train <- cbind(train_subject, train_activity, train_data)
names(test_data) <- labels
test_subject <- read.table(file="./UCI HAR Dataset/test/subject_test.txt", col.names = "subject_id")
test_activity <- read.table(file="./UCI HAR Dataset/test/y_test.txt", col.names = "activity_id")
test <- cbind(test_subject, test_activity, test_data)
run_analysis <- rbind(test, train)
run_analysis2 <- tbl_df(run_analysis)
run_analysis2
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE))
arrrange(run_analysis2, subject_id, activity_id)
arrange(run_analysis2, subject_id, activity_id)
run_analysis2[.400:420]
run_analysis2[,400:420]
?make.names
labels <- make.names(labels$V2, unique = TRUE)
labels <- read.table(file= "./UCI HAR Dataset/features.txt", sep = "", stringsAsFactors = F)
labels <- make.names(labels$V2, unique = TRUE)
train_data <- read.table(file = "./UCI HAR Dataset/train/X_train.txt", sep = "", header = F)
names(train_data) <- labels
train_subject <- read.table(file= "./UCI HAR Dataset/train/subject_train.txt", col.names = "subject_id")
train_activity <- read.table(file= "./UCI HAR Dataset/train/y_train.txt", col.names = "activity_id")
train <- cbind(train_subject, train_activity, train_data)
test_data <- read.table(file = "./UCI HAR Dataset/test/X_test.txt", sep = "", header = F)
names(test_data) <- labels
test_subject <- read.table(file="./UCI HAR Dataset/test/subject_test.txt", col.names = "subject_id")
test_activity <- read.table(file="./UCI HAR Dataset/test/y_test.txt", col.names = "activity_id")
test <- cbind(test_subject, test_activity, test_data)
run_analysis <- rbind(test, train)
run_analysis2 <- tbl_df(run_analysis)
arrange(run_analysis2, subject_id, activity_id)
View(run_analysis2)
run_analysis2 <- arrange(run_analysis2, subject_id, activity_id)
View(run_analysis2)
run_analysis3 <- select(run_analysis2, contains("mean", "std", ignore.case = TRUE))
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE))
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE) | contains("std", ignore.case = TRUE))
run_analysis3 <- select(run_analysis2, contains("mean" | "std", ignore.case = TRUE))
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE))
run_analysis4 <- select(run_analysis2, contains("std", ignore.case = TRUE))
run_analysis3 <- select(run_analysis2, contains(c("mean", "std") ignore.case = TRUE))
var <- c("mean", "std")
run_analysis3 <- select(run_analysis2, contains(c("mean", "std"), ignore.case = TRUE))
run_analysis3 <- select(run_analysis2, one_of(var))
run_analysis3 <- select(run_analysis2, contains("mean", ignore.case = TRUE))
run_analysis4 <- select(run_analysis2, contains("std", ignore.case = TRUE))
run_analysis5 <- cbind(run_analysis3, run_analysis4
run_analysis5 <- cbind(run_analysis3, run_analysis4)
View(run_analysis5)
run_analysis3 <- select(run_analysis2, subject_id, activity_id, contains("mean", ignore.case = TRUE))
run_analysis4 <- select(run_analysis2, subject_id, activity_id, contains("std", ignore.case = TRUE))
run_analysis5 <- cbind(run_analysis3, run_analysis4)
View(run_analysis5)
?labels
install.packages("plyr")
library(plyr)
as.factor(run_analysis5$activity_id)
run_analysis5$activity_id <- as.factor(run_analysis5$activity_id)
revalue(run_analysis5$activity_id, c('1'="Walking", '2'="Walking Upstairs",
'3'="Walking Downstairs", '4'="Sitting", '5'="Standing", '6'="Laying"))
run_analysis5$activity_id <- revalue(run_analysis5$activity_id, c('1'="Walking", '2'="Walking Upstairs",
'3'="Walking Downstairs", '4'="Sitting", '5'="Standing", '6'="Laying"))
View(run_analysis5)
View(run_analysis5)
?dump
write.csv(run_analysis5, "run_analysis.csv", row.names = FALSE)
